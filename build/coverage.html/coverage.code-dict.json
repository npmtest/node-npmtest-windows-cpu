{"/home/travis/build/npmtest/node-npmtest-windows-cpu/test.js":"/* istanbul instrument in package npmtest_windows_cpu */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-windows-cpu/lib.npmtest_windows_cpu.js":"/* istanbul instrument in package npmtest_windows_cpu */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_windows_cpu = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_windows_cpu = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-windows-cpu/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-windows-cpu && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_windows_cpu */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_windows_cpu\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_windows_cpu.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_windows_cpu.rollup.js'] =\n            local.assetsDict['/assets.npmtest_windows_cpu.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_windows_cpu.__dirname + '/lib.npmtest_windows_cpu.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-windows-cpu/node_modules/windows-cpu/index.js":"/**\r\n * windows-cpu module for Node.js to get various load statistics.\r\n * @module windows-cpu\r\n * @version 0.1.4\r\n * @author Kyle Ross <kylerross1324@gmail.com>\r\n * @license MIT License\r\n * \r\n * @requires os\r\n * @requires child_process\r\n *\r\n * @example\r\n *\r\n * var cpu = require('windows-cpu');\r\n */\r\n\r\n(function() {\r\n    var platform = require('os').platform(),\r\n        path     = require('path'),\r\n        exec     = require('child_process').exec,\r\n        execFile = require('child_process').execFile,\r\n        wmic     = platform === 'win32'? path.join(process.env.SystemRoot, 'System32', 'wbem', 'wmic.exe') : null,\r\n        emptyFn  = function(){},\r\n        findLoad;\r\n    \r\n    /*\r\n     * Checks current platform to ensure we are running on `win32`.\r\n     * @private\r\n     * @param {function} cb A callback function to call if there is an error.\r\n     * @returns {boolean} True if `win32` platform, else false.\r\n     */\r\n    function checkPlatform(cb) {\r\n        if(platform !== 'win32') {\r\n            if(isFunction(cb)) cb(new Error('windows-cpu> [ERROR] This module only works on Windows platforms.'));\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    /*\r\n     * Proper checking to see if variable is a function.\r\n     * @private\r\n     * @param {*} fn The variable to check if is a function.\r\n     * @returns {boolean} True if is a function, else false.\r\n     */\r\n    function isFunction(fn) {\r\n        var getType = {};\r\n        return fn && getType.toString.call(fn) === '[object Function]';\r\n    }\r\n    \r\n    /**\r\n     * Gets the total load in percent for process(es) by a specific search parameter.\r\n     * @param {string|number} arg Specific search parameter. Can be a Process ID or Process Name.\r\n     * @param {function} cb A callback function to handle the results (error, results).\r\n     * @example\r\n     *\r\n     * var cpu = require('windows-cpu');\r\n     *\r\n     * // Find the total load for \"chrome\" processes\r\n     * cpu.findLoad('chrome', function(error, results) {\r\n     *      if(error) {\r\n     *          return console.log(error);\r\n     *      }\r\n     *\r\n     *      // results =>\r\n     *      // {\r\n     *      //    load: 8,\r\n     *      //    found: [\r\n     *      //        { pid: '900', process: 'chrome', load: 4 },\r\n     *      //        { pid: '905', process: 'chrome#1', load: 0 },\r\n     *      //        { pid: '910', process: 'chrome#2', load: 4 }\r\n     *      //    ]\r\n     *      // }\r\n     *\r\n     *      console.log('Google Chrome is currently using ' + results.load + '% of the cpu.');\r\n     * });\r\n     */\r\n    findLoad = exports.findLoad = function findLoad(arg, cb) {\r\n        if(!isFunction(cb)) cb = emptyFn;\r\n        if(!checkPlatform(cb)) return;\r\n        \r\n        var cmd = \"wmic path Win32_PerfFormattedData_PerfProc_Process get Name,PercentProcessorTime,IDProcess | findstr /i /c:\" + arg;\r\n        exec(cmd, function (error, res, stderr) {\r\n            if(error !== null || stderr) return cb(error || stderr);\r\n            if(!res) return cb('Cannot find results for provided arg: ' + arg, { load: 0, results: [] });\r\n            \r\n            var found = res.replace(/[^\\S\\n]+/g, ':').replace(/\\:\\s/g, '|').split('|').filter(function(v) {\r\n                return !!v;\r\n            }).map(function(v) {\r\n                var data = v.split(':');\r\n                return {\r\n                    pid: +data[0],\r\n                    process: data[1],\r\n                    load: +data[2]\r\n                };\r\n            });\r\n            \r\n            var totalLoad = 0;\r\n            \r\n            found.forEach(function(obj) {\r\n                totalLoad += obj.load;\r\n            });\r\n            \r\n            var output = {\r\n                load: totalLoad,\r\n                found: found\r\n            };\r\n            \r\n            cb(null, output);\r\n        });\r\n    };\r\n    \r\n    /**\r\n     * Gets the total load in percent for all processes running on the current machine per CPU.\r\n     * @param {function} cb A callback function to handle the results (error, results).\r\n     * @example\r\n     *\r\n     * var cpu = require('windows-cpu');\r\n     *\r\n     * // Get total load on server for each CPU\r\n     * cpu.totalLoad(function(error, results) {\r\n     *      if(error) {\r\n     *          return console.log(error);\r\n     *      }\r\n     *\r\n     *      // results (single cpu in percent) =>\r\n     *      // [8]\r\n     *\r\n     *      // results (multi-cpu in percent) =>\r\n     *      // [3, 10]\r\n     * });\r\n     */\r\n    exports.totalLoad = function totalLoad(cb) {\r\n        if (!isFunction(cb)) cb = emptyFn;\r\n        if (!checkPlatform(cb)) return;\r\n        \r\n        execFile(wmic, ['cpu', 'get', 'loadpercentage'], function (error, res, stderr) {\r\n            if(error !== null || stderr) return cb(error || stderr);\r\n            \r\n            var cpus = (res.match(/\\d+/g) || []).map(function(x) { \r\n                return +(x.trim()); \r\n            });\r\n            \r\n            cb(null, cpus);\r\n        });\r\n    };\r\n    \r\n    /**\r\n     * Gets the total load in percent for all Node.js processes running on the current machine.\r\n     * @param {function} cb A callback function to handle the results (error, results).\r\n     * @example\r\n     *\r\n     * var cpu = require('windows-cpu');\r\n     *\r\n     * // Get total load for all node processes\r\n     * cpu.nodeLoad(function(error, results) {\r\n     *      if(error) {\r\n     *          return console.log(error);\r\n     *      }\r\n     *\r\n     *      // results =>\r\n     *      // {\r\n     *      //    load: 20,\r\n     *      //    found: [\r\n     *      //        { pid: '1000', process: 'node', load: 10 },\r\n     *      //        { pid: '1050', process: 'node#1', load: 6 },\r\n     *      //        { pid: '1100', process: 'node#2', load: 4 }\r\n     *      //    ]\r\n     *      // }\r\n     *\r\n     *      console.log('Total Node.js Load: ' + results.load);\r\n     * });\r\n     */\r\n    exports.nodeLoad = function nodeLoad(cb) {\r\n        findLoad('node', cb);\r\n    };\r\n    \r\n    /**\r\n     * Gets the total load in percent for all processes running on the current machine per CPU.\r\n     * @param {function} cb A callback function to handle the results (error, results).\r\n     * @example\r\n     *\r\n     * var cpu = require('windows-cpu');\r\n     *\r\n     * // Get load for current running node process\r\n     * cpu.processLoad(function(error, results) {\r\n     *      if(error) {\r\n     *          return console.log(error);\r\n     *      }\r\n     *\r\n     *      // results =>\r\n     *      // {\r\n     *      //    load: 10,\r\n     *      //    found: [\r\n     *      //        { pid: '1000', process: 'node', load: 10 }\r\n     *      //    ]\r\n     *      // }\r\n     *\r\n     *      console.log('Total Process Load: ' + results.load);\r\n     * });\r\n     */\r\n    exports.processLoad = function processLoad(cb) {\r\n        findLoad(process.pid, cb);\r\n    };\r\n    \r\n    /**\r\n     * Gets the name of each processor in the machine.\r\n     * @param {function} cb A callback function to handle the results (error, results).\r\n     * @example\r\n     *\r\n     * var cpu = require('windows-cpu');\r\n     *\r\n     * // Get listing of processors\r\n     * cpu.cpuInfo(function(error, results) {\r\n     *      if(error) {\r\n     *          return console.log(error);\r\n     *      }\r\n     *\r\n     *      // results =>\r\n     *      // [\r\n     *      //    'Intel(R) Xeon(R) CPU E5-2609 0 @ 2.40GHz',\r\n     *      //    'Intel(R) Xeon(R) CPU E5-2609 0 @ 2.40GHz'\r\n     *      // ]\r\n     *\r\n     *      console.log('Installed Processors: ', results);\r\n     * });\r\n     */\r\n    exports.cpuInfo = function cpuInfo(cb) {\r\n        if(!isFunction(cb)) cb = emptyFn;\r\n        if(!checkPlatform(cb)) return;\r\n        \r\n        execFile(wmic, ['cpu', 'get', 'Name'], function (error, res, stderr) {\r\n            if(error !== null || stderr) return cb(error || stderr);\r\n            \r\n            var cpus = res.match(/[^\\r\\n]+/g).map(function(v) {\r\n                return v.trim();\r\n            });\r\n            \r\n            cpus.shift();\r\n            cb(null, cpus);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Gets the total memory usage value in KB , MB and GB .\r\n     * @param {function} cb A callback function to handle the result (error, results).\r\n     * @example\r\n     *\r\n     * var cpu = require('windows-cpu');\r\n     *\r\n     * // Get the memory usage\r\n     * cpu.totalMemoryUsage(function(error, results) {\r\n     *      if(error) {\r\n     *          return console.log(error);\r\n     *      }\r\n     *\r\n     *      // results =>\r\n     *      // { \r\n     *      //    usageInKb: 3236244,\r\n     *      //    usageInMb: 3160.39453125,\r\n     *      //    usageInGb: 3.086322784423828 \r\n     *      // }\r\n     *\r\n     *      console.log('Total Memory Usage: ', result);\r\n     * });\r\n     */\r\n    exports.totalMemoryUsage = function totalMemoryUsage(cb) {\r\n        if (!isFunction(cb)) cb = emptyFn;\r\n        if (!checkPlatform(cb)) return;\r\n        \r\n        var cmd = \"tasklist /FO csv /nh\";\r\n        exec(cmd, function (error, res, stderr) {\r\n            if(error !== null || stderr) return cb(error || stderr);\r\n            var results = { usageInKb: 0 , usageInMb: 0 , usageInGb: 0 };\r\n            \r\n            results.usageInKb = res.match(/[^\\r\\n]+/g).map(function(v) {\r\n                var amt = +v.split('\",\"')[4].replace(/[^\\d]/g, '');\r\n                return (!isNaN(amt) && typeof amt === 'number')? amt : 0;\r\n            }).reduce(function(prev, current) {\r\n                return prev + current;\r\n            });\r\n            \r\n            results.usageInMb = results.usageInKb / 1024;\r\n            results.usageInGb = results.usageInMb / 1024;\r\n            \r\n            cb(null, results);\r\n        });\r\n    };\r\n}());\r\n"}